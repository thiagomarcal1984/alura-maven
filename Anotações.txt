Build e dependências em uma aplicação Java

Usar o Maven é bom para testar a aplicação antes de construir o arquivo para
deploy. Modificações em arquivos de configuração, nos nomes dos arquivos e
pastas etc. podem ser automatizados com o uso do Maven.

A Apache criou duas ferramentas, das quais o Maven surgiu:
    Ant - para fazer build (compilar e testar) das aplicações; e
    Ivy - para gerenciar dependências.

O Eclipse tem opções para converter um projeto qualquer em um projeto do Maven:
    Botão direito no projeto -> Configure -> Convert to Maven Project.
    

GroupId = pacote padrão (br.com.alura)
ArtifactId = nome do projeto (loja)
Version = Versão (1.0.0)
Packaging = Forma de build/empacotamento (jar é o default)

Estrutura padrão de um projeto Maven:
    * src/main/java         Classes de Código Java
    * src/main/resources    Config Files e HTML. Tudo que não é Java.
    * src/test/java         Classes de Código Java de Teste
    * src/test/resources    Config Files dos Testes. DBUnit, Selenium etc.

Crie um projeto Dynamic Web Project e o converta para Maven:
    Botão direito no projeto -> Configure -> Convert to Maven Project.

O Eclipse infere as dependências usadas no projeto e gera o arquivo pom.xml. 
A estrutura de pastas, no entanto, não é atualizada na forma da estrutura 
padrão de projetos Maven. O pom.xml também não atualiza a referência ao 
diretório de código-fonte e o diretório do código dos testes. Para isso, rode:
    Botão direito no projeto -> Build Path -> Configure Build Path...

    Na guia Source, remova/edite os diretórios conforme o padrão do Maven.
    A pasta test/java precisa ser configurada para conter test sources. Expanda
    a pasta test/java e altere para Yes a opção "Contains test sources". Além
    disso, nas duas pastas de teste, marque a caixa "Allow output folder for 
    source folders" e altere a pasta output folder para "target/test-classes".
    Nas pastas test/resources e main/resources, clique duas vezes sobre 
    "Excluded" e acrescente o padrão de exclusão "**" (dois asteriscos).

    A pasta Web-Content de Dynamic Web Projects deve ser renomeada/movida para 
    src/main/webapp.

    A pasta lib em webapp (Web-Content) não precisa ser guardada, porque o 
    Maven vai baixar as libs depois.

    Para que o Maven atualize o projeto, clique com o botão direito sobre o
    projeto -> Maven -> Update Project (ou Alt + F5)


Hierarquia das tags de dependências no pom.xml
    <dependencies>
        <dependency>
            <groupId>nome.do.pack</groupId>
            <artifact>projeto</artifact>
            <version>3.2.1</version>
            <scope>test</scope>
            <!-- 
                Scope compile: só é usada para a compilação do pacote.
                Scope provided: o servidor de aplicação fornece a biblioteca.
                Scope runtime: usada em tempo de execução.
                Scope test: usada apenas nos testes.
            -->
        </dependency>
    </dependencies>

Ao baixar o junit, há uma dependência chamada hamcrest. Ela não foi declarada,
mas foi baixada.


Onde podemos pesquisar as dependências do Maven? 
No site MVN Repository: https://mvnrepository.com/

Comando no Eclipse para atualizar as dependências do projeto: Alt + F5, ou:
    Botão direito -> Maven -> Update Maven Project

O arquivo pom.xml pode conter outros repositórios além do mvnrepository.com.:
    <repositories>
        <repository>
            <id>spring-repo</id>
            <url>https://repo.spring.io/release</url>
            <!-- A URL pode indicar alguma pasta local ou de rede interna. -->
        </repository>
    </repositories>

Por padrão, o Maven procura as dependências no seu cache local. Se não achar no
cache, ele procura nos repositórios. Esse cache fica localizado na pasta .m2, 
dentro da pasta do usuário (home) do computador. Às vezes o download das 
dependências não funciona bem porque elas estão corrompidas. Nesse caso, você
pode excluir o conteúdo da baixa .m2. e repetir o download das dependências.


Foco de agora: os goals (objetivos) do Maven. Sintaxe: mvn (goal1 goal2 ...).
    mvn compile => gera os arquivos .class da aplicação.
    mvn clean => apaga o diretório target (onde fica os compilados).
    mvn clean compile => apaga os compilados e depois compila.
    mvn test => roda os testes da pasta src/test do projeto.
    mvn package => empacota no formato jar ou war, conforme a tag <packaging>
            no pom.xml. Esse comando compila, testa e gera o artefato de build.
            Repare que se houver falhas nos testes, o pacote não é gerado.
    mvn install => envia o pacote para o cache do Maven (.m2). Geralmente
            é o caminho do pacote do compilado. Ex.:br.com.alura.loja.
    mvn deploy => envia o pacote para um repositório remoto. Para que o comando
            funcione, é necessário configurar dentro da tag <repositories>.

O Maven tenta usar o Java 5 como padrão para contruir o código. Isso pode 
resultar no seguinte erro: 

    [ERROR] Failed to execute goal 
    org.apache.maven.plugins:maven-compiler-plugin:3.1:compile 
    (default-compile) on project lo[ERROR] Source option 5 is no longer 
    supported. Use 7 or later.
    [ERROR] Target option 5 is no longer supported. Use 7 or later.

Para corrigir isso, inclua um dos seguintes códigos no pom.xml:

	1) Properties
        <properties>
            <maven.compiler.source>${versão:1.7}</maven.compiler.source>
            <maven.compiler.target>${versão:1.7}</maven.compiler.target>
        </properties>

    2) Build
        <build>
            <plugins>
                <plugin>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <configuration>
                        <source>${versão do Java:1.7}</source>
                        <target>${versão do Java:1.7}</target>
                    </configuration>
                </plugin>
            </plugins>
        </build>

Dentro da tag <build>, podemos inserir a tag <finalName>, que vai indicar o 
nome do pacote no repositório.


Plugins são formas de manipular o build da aplicação. Os plugins são declarados
dentro tag <build> no arquivo pom.xml. Para executar um goal de um plugin, use 
a sintaxe "mvn plugin:goal". Por exemplo: se você usar um plugin do Jetty no 
pom.xml (para substituir o Tomcat pelo container embutido Jetty), você pode 
executá-lo com o comando "mvn jetty:run".

É possível criarmos um plugin personalizado para incrementar o build do Maven.

Uma vez que o goal report é executado no Jacoco, um HTML é gerado com a 
indicação da cobertura dos testes. Ele fica em target\site\jacoco\index.html .
Na fase test (que está no pom.xml), o goal report é acionado automaticamente.
Então, para gerar o report basta usar o mvn test que o goal report é acionado.

Obs.: a versão do Jacoco no curso é a 0.8.2, mas ela está falhando. Por isso,
atualizamos a versão para 0.8.6 e funcionou.


É necessário alterar o arquivo .m2/settings.xml para configurar o proxy.
Como configurar Proxy: https://maven.apache.org/guides/mini/guide-proxies.html

O arquivo settings.xml também pode guardar a tag <repositories>, da mesma forma
que o arquivo pom.xml. Assim, o repositório não fica exclusivo pro projeto, mas
fica acessível para qualquer projeto no computador. No entanto, configurações
do pom.xml sobrescrevem as definições gerais do settings.xml.
